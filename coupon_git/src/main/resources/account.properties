bankContractAddress=0x102ab8ce7048270053051bda6f9e7e7273f8e72a
#mainContractAddress=0xd1687bb91ff78c4ab4881595c413a7af2a2f2cf4
#mainContractAddress=0x8555bb93c049c3cc8686e1e9020c590fd3274cee
#merchantContractAddress=0xb0bd0f243de74f09af8c323bf71fd23141a1d515
#consumerContractAddress=0x794fc320ba9c7dd1e6b8bea869e890199e3e8bfa




bankAccount=0xb6e4edc42748898e409d6c341058b4d18500a0ed
merchantAccount1=0x0cc98765540ac8b57c6f7d39671ce3a3f4098ff2
merchantAccount2=0xf8ae38817f9eb1f9b26a717079d5e31ea11547e4
merchantAccount3=0xaa4fdc93e0cfb2f862656bcff4593e4b165ac9b1
consumerAccount1=0x3ffe6fbc5039cf55266ba686d1a0d4ef77ab0fda
consumerAccount2=0x00a1bbd6878d283020c289115bec2793eb46f9ec
consumerAccount3=0xdd203d2ae2ff5d78c3a48788dc68b95a24b196b2
consumerAccount4=0x00f817880cdeed9f5f621c13f998ef0eaab4a2ff

code=pragma solidity ^0.4.10;contract Bank{address owner;address[] merchants;address firstChecker;address secondChecker;function Bank(){owner = msg.sender;firstChecker = 0x123;secondChecker = 0x456;}modifier OnlyOwner{if(msg.sender != owner){throw;}_;}function createMerchant(address merchantAccount) OnlyOwner{merchants.push(new Merchant(merchantAccount));}function approve(bytes signature,address merchantAddress,uint amount) OnlyOwner{Merchant m = Merchant(merchantAddress);m.settlementApprove(amount);}function approveWithdraw(address merchantAddress) OnlyOwner{Merchant m = Merchant(merchantAddress);m.settlementWithdraw();}function getMerchants() constant returns(address[]){return merchants;}function getCorrespondingMerchant(address merchantAccount) constant returns(address){uint i = merchants.length;for(i=merchants.length-1;i>=0;i--){Merchant m = Merchant(merchants[i]);if(merchantAccount == m.getOwner()){break;}}return merchants[i];}}contract Merchant{address owner;address banker;uint settlementBalance;address[] unusedCoupons;address[] usedCoupons;address[] notGivenCoupons;address[] historyCoupons;address[] curGrant;mapping(bytes32 => address[]) grantPair;modifier OnlyBanker{if(banker != msg.sender){throw;}_;}modifier OnlyOwner{if(owner != msg.sender){throw;}_;}function Merchant(address merchantAccount){owner = merchantAccount;banker = msg.sender;}function settlementApprove(uint amount) OnlyBanker{settlementBalance += amount;}function settlementWithdraw() OnlyBanker{settlementBalance = 0;}function getSettlementBalance()constant returns(uint){return settlementBalance;}function issueCoupon(uint value,uint limit,uint quantity,bytes32 startDate,bytes32 endDate) OnlyOwner{if(settlementBalance>=(value*quantity)){for(uint i=0;i<quantity;i++){notGivenCoupons.push(new Coupon(value,limit,startDate,endDate));settlementBalance -= value;}}}function getNotGivenCoupons() constant returns(address[]){return notGivenCoupons;}function terminateCoupon(bytes32 curDate) OnlyOwner{for(uint k=0;k<notGivenCoupons.length;k++){historyCoupons.push(notGivenCoupons[k]);Coupon c = Coupon(notGivenCoupons[k]);settlementBalance += c.getValue();}delete notGivenCoupons;for(uint i=0;i<unusedCoupons.length;i++){Coupon c1 = Coupon(unusedCoupons[i]);if(c.getEndDate()<curDate){settlementBalance += c1.getValue();}historyCoupons.push(unusedCoupons[i]);}delete unusedCoupons;for(uint j=0;j<usedCoupons.length;j++){historyCoupons.push(usedCoupons[j]);}delete usedCoupons;}function getUnusedCoupons() constant returns(address[]){return unusedCoupons;}function getUsedCoupons() constant returns(address[]){return usedCoupons;}function getHistoryCoupons() constant returns(address[]){return historyCoupons;}function grant(address _consumer,uint quantity,bytes32 date,bytes32 mark,uint obtainValue) OnlyOwner{if(quantity<=notGivenCoupons.length){Consumer consumer = Consumer(_consumer);for(uint i=notGivenCoupons.length-1;i>=notGivenCoupons.length-quantity;i--){Coupon couponTemp = Coupon(notGivenCoupons[i]);couponTemp.setObtainDate(date);couponTemp.setState(2);couponTemp.setObtainValue(obtainValue);couponTemp.setGranter(couponTemp.getOwner());couponTemp.setOwner(_consumer);consumer.addCoupon(notGivenCoupons[i]);unusedCoupons.push(notGivenCoupons[i]);curGrant.push(notGivenCoupons[i]);}grantPair[mark] = curGrant;delete curGrant;notGivenCoupons.length = notGivenCoupons.length - quantity;}}function getCorrespondingGrant(bytes32 mark) constant returns(address[]){return grantPair[mark];}function confirmCouponPay(uint consumeValue,bytes32 consumeDate,address couponAddr,address _consumer) OnlyOwner{Coupon coupon = Coupon(couponAddr);if(consumeValue>=coupon.getLimit()){coupon.setConsumeValue(consumeValue);coupon.setConsumeDate(consumeDate);coupon.setState(3);Consumer consumer = Consumer(_consumer);consumer.couponPay(couponAddr);uint i = unusedCoupons.length;for(i=0;i<unusedCoupons.length;i++){if(unusedCoupons[i] == couponAddr){break;}}if(i!=unusedCoupons.length){for(uint j=i;j<unusedCoupons.length-1;j++){unusedCoupons[j] = unusedCoupons[j+1];}unusedCoupons.length -= 1;usedCoupons.push(couponAddr);settlementBalance += coupon.getValue();}else{settlementBalance += coupon.getValue();Merchant m = Merchant(coupon.getGranter());if(m.getOwner() != owner){m.addToUsedCoupons(couponAddr);}}}}function getOwner() constant returns(address){return owner;}function addToUsedCoupons(address couponAddr){usedCoupons.push(couponAddr);}}contract Consumer{address owner;address banker;uint state;address[] coupons;function Consumer(address bankAccount){owner = msg.sender;banker = bankAccount;state = 1;}modifier OnlyBanker{if(msg.sender != banker){throw;}_;}function freezeConsumer() OnlyBanker{state = 0;}function thawConsumer() OnlyBanker{state = 1;}function addCoupon(address _coupon){coupons.push(_coupon);}function couponPay(address couponAddr){uint i = 0;for(;i<coupons.length;i++){if(coupons[i] == couponAddr){break;}}for(uint j=i;j<coupons.length-1;j++){coupons[j] = coupons[j+1];}coupons.length -= 1;}function transfer(address newConsumer,address _coupon){Coupon coupon = Coupon(_coupon);coupon.setOwner(newConsumer);Consumer to = Consumer(newConsumer);to.addCoupon(_coupon);uint i = 0;for(;i<coupons.length;i++){if(coupons[i] == _coupon){break;}}for(uint j=i;j<coupons.length-1;j++){coupons[j] = coupons[j+1];}coupons.length -= 1;}function getCoupons() constant returns (address[]){return coupons;}}contract Coupon{address owner;address granter;uint value;uint limit;bytes32 startDate;bytes32 endDate;uint obtainValue;bytes32 obtainDate;bytes32 consumeDate;uint consumeValue;uint state=1;function Coupon(uint _value,uint _limit,bytes32 _startDate,bytes32 _endDate){value = _value;limit = _limit;owner = msg.sender;startDate = _startDate;endDate = _endDate;consumeValue = 0;state = 1;}function setOwner(address addr){owner = addr;}function getOwner() constant returns(address){return owner;}function setObtainDate(bytes32 date){obtainDate = date;}function setState(uint _state){state = _state;}function setConsumeValue(uint _value){consumeValue = _value;}function setConsumeDate(bytes32 _date){consumeDate = _date;}function getLimit() constant returns(uint){return limit;}function getValue() constant returns(uint){return value;}function getEndDate() constant returns(bytes32){return endDate;}function getStartDate() constant returns(bytes32){return startDate;}function getGranter() constant returns(address){return granter;}function setGranter(address _granter){granter = _granter;}function getObtainValue() constant returns(uint){return obtainValue;}function setObtainValue(uint _obtainValue){obtainValue = _obtainValue;}function getState() constant returns(uint){return state;}function getObtainDate() constant returns(bytes32){return obtainDate;}function getConsumeValue() constant returns(uint){return consumeValue;}function getConsumeDate() constant returns(bytes32){return consumeDate;}}
